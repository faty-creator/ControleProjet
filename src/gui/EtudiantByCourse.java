/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Cours;
import beans.Etudiant;
import beans.Inscription;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import services.CoursService;
import services.EtudiantService;
import services.InscriptionService;

/**
 *
 * @author pc
 */
public class EtudiantByCourse extends javax.swing.JInternalFrame {

    private InscriptionService is;
    private EtudiantService es;
    private CoursService cs;
    private static EtudiantByCourse instance;

    /**
     * Creates new form EtudiantByCourse
     */
    public EtudiantByCourse() {
        super("Liste des étudiants par cours", true, true, true, true);
        setSize(800, 600); // Définir la taille de la fenêtre
        setDefaultCloseOperation(HIDE_ON_CLOSE); // Fermer la fenêtre sans quitter l'application
        initComponents();
        is = new InscriptionService();
        es = new EtudiantService();
        cs = new CoursService();
        loadEtudiantByCourse();
    }

    public static EtudiantByCourse getInstance() {
        if (instance == null || instance.isClosed()) {
            synchronized (EtudiantByCourse.class) { // Synchronisation pour la sécurité des threads
                if (instance == null || instance.isClosed()) {
                    instance = new EtudiantByCourse();
                }
            }
        }
        return instance;
    }

    void loadEtudiantByCourse() {
        listeByCourse.removeAllItems();
        List<Cours> allCourses = cs.findAll();

        // Utilisation d'un Set pour éliminer les doublons
        Set<Cours> uniqueCourses = new HashSet<>(allCourses);

        if (uniqueCourses != null && !uniqueCourses.isEmpty()) {
            for (Cours cours : uniqueCourses) {
                listeByCourse.addItem(cours);
            }
        } else {
            System.out.println("Aucun cours disponible.");
        }
    }

    void loadStudentsForCourse(Cours cours) {
        DefaultTableModel model = (DefaultTableModel) tableModel.getModel();
        model.setRowCount(0); // Effacer le tableau

        List<Etudiant> etudiants = is.findEtudiantByCourse(cours);
        System.out.println("Nombre d'étudiants à afficher : " + etudiants.size());

        if (etudiants != null && !etudiants.isEmpty()) {
            for (Etudiant etudiant : etudiants) {
                model.addRow(new Object[]{
                    etudiant.getId(),
                    etudiant.getNom(),
                    etudiant.getPrenom(),
                    etudiant.getDateNaissance(),
                    etudiant.getEmail(),
                    cours.getIntitule()
                });
                System.out.println("Étudiant ajouté : " + etudiant.getNom() + " " + etudiant.getPrenom());
            }
        } else {
            System.out.println("Aucun étudiant inscrit dans ce cours.");
            model.addRow(new Object[]{"Aucun étudiant", "", "", "", "", ""});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        listeByCourse = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        graphe = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableModel = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setName("Liste d'etudiant d'un cours"); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setText("Liste des étudiants du cours :");

        listeByCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeByCourseActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/LIST (2).png"))); // NOI18N

        graphe.setBackground(new java.awt.Color(204, 204, 255));
        graphe.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        graphe.setText("Graphe");
        graphe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grapheActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/hand.png"))); // NOI18N
        jLabel3.setText("  Pour voir le graphe, cliquez ici.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(graphe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                        .addComponent(listeByCourse, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(442, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(listeByCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(graphe)
                .addGap(32, 32, 32))
        );

        tableModel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tableModel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nom", "Prenom", "Date de Naissance", "Email", "Cours"
            }
        ));
        jScrollPane2.setViewportView(tableModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listeByCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeByCourseActionPerformed

        Cours selectedCourse = (Cours) listeByCourse.getSelectedItem();
        if (selectedCourse != null) {
            System.out.println("Cours sélectionné : ID = " + selectedCourse.getId() + ", Intitulé = " + selectedCourse.getIntitule());
            loadStudentsForCourse(selectedCourse);
        } else {
            System.out.println("Aucun cours sélectionné.");
        }
    }//GEN-LAST:event_listeByCourseActionPerformed

    private void grapheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grapheActionPerformed
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Initialiser les services
        CoursService cs = new CoursService();
        InscriptionService is = new InscriptionService();

        // Récupérer tous les cours
        List<Cours> allCourses = cs.findAll();

        if (allCourses != null) {
            for (Cours cours : allCourses) {
                // Récupérer les étudiants inscrits à ce cours
                List<Etudiant> etudiants = is.findEtudiantByCourse(cours);
                if (etudiants != null) {
                    int count = etudiants.size(); // Nombre d'étudiants
                    dataset.addValue(count, "Étudiants", cours.getIntitule()); // Ajouter au dataset
                }
            }
        }

        // Créer le diagramme à barres
        JFreeChart barChart = ChartFactory.createBarChart(
                "Nombre d'étudiants par cours", // Titre du graphique
                "Cours", // Axe X
                "Nombre d'étudiants", // Axe Y
                dataset, // Données
                PlotOrientation.VERTICAL, // Orientation
                true, true, false // Inclure légende, tooltips, URLs
        );

        // Créer un panel pour afficher le graphique
        ChartPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new java.awt.Dimension(560, 367));

        // Afficher le graphique dans une nouvelle fenêtre
        JFrame frame = new JFrame("Graphique des étudiants par cours");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(chartPanel);
        frame.pack();
        frame.setLocationRelativeTo(null); // Centrer la fenêtre
        frame.setVisible(true);
    }//GEN-LAST:event_grapheActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton graphe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox listeByCourse;
    private javax.swing.JTable tableModel;
    // End of variables declaration//GEN-END:variables
}
